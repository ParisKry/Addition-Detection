#Import necessary for using regular expressions in Python
import re

'''
Regular expression used to separate each line by sentence. It does so by
matching all characters (non-greedily thanks to the "?" after the "+") until it
finds a period which is followed by whitespace. That way, it doesn't confuse
decimal points or abbreviations (such as 'r.t.') with actual full stops. It
then groups the remaining string as "the_rest" so that it may be fed into the
next iteration of the loop.
'''
non_full_stop = re.compile("(.+?(\.\s))(?P<the_rest>.*)")

#Opening the file with the experiments, assuming it's in the same directory.
try:
    file_lines = open("exercise_experimentals.txt", encoding = "UTF-8")
except IOError:
    print("The file couldn't be read.")

'''
Loop where the detection occurs. At the moment, all it does is separate each
line into sentences. The outer loop parses the file line by line, while the
inner loop performs the separation. It starts by ensuring that the line ends
in a newline character for regex matching purposes. Then, it tries to match
the beginning of the string with the non_full_stop regular expression. If it
does (which is to say, if the string ends in a period immediately followed by
whitespace), then the match (i.e. the sentence) is printed and the remainder of
the string (i.e. the non-matched part) is sent to the next iteration of the
inner loop. If there is no match, the inner loop is exited and the next line is
fed into the inner loop.
'''
for line in file_lines:
    #Print formatting, the condition ignores the file's blank lines.
    if line != "\n":
        print(line + "\n")
    
    while True:
        #Necessary condition to prevent the index from going out of bounds.
        if line:
            if line[-1] != "\n":
                line += "\n"
        sentence = non_full_stop.match(line)
        if sentence:
            print(sentence.group(1).strip() + "\n")
            line = sentence.group("the_rest")
        else:
            #Print formatting.
            print()
            break
